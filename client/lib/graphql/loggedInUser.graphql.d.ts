/* 2a6555e28405450ac5b110842a055f1154f98bbb
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** Mongo id scalar type */
    ObjectId: any;
};
export declare type LoginInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createVoc: Vokabel;
    deleteVok: Scalars['Boolean'];
    login: UserResponse;
    register: UserResponse;
    udpateVok: Vokabel;
};
export declare type MutationCreateVocArgs = {
    input: VokabelInput;
};
export declare type MutationDeleteVokArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type MutationLoginArgs = {
    input: LoginInput;
};
export declare type MutationRegisterArgs = {
    input: RegisterInput;
};
export declare type MutationUdpateVokArgs = {
    input: VokabelInput;
};
export declare type Query = {
    __typename?: 'Query';
    getLoggedUser?: Maybe<User>;
    readUserVoks: Array<Vokabel>;
    readVoc: Vokabel;
    readVocs: Array<Vokabel>;
    user?: Maybe<User>;
};
export declare type QueryReadUserVoksArgs = {
    userId: Scalars['ObjectId'];
};
export declare type QueryReadVocArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type QueryUserArgs = {
    userId: Scalars['ObjectId'];
};
export declare type RegisterInput = {
    email: Scalars['String'];
    password: Scalars['String'];
    username: Scalars['String'];
};
/** User */
export declare type User = {
    __typename?: 'User';
    _id: Scalars['ObjectId'];
    email: Scalars['String'];
    username: Scalars['String'];
};
export declare type UserResponse = {
    __typename?: 'UserResponse';
    token?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
};
/** Vokabel */
export declare type Vokabel = {
    __typename?: 'Vokabel';
    _id: Scalars['ObjectId'];
    creator: User;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type VokabelInput = {
    _id?: Maybe<Scalars['ObjectId']>;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type Logged_In_UserQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type Logged_In_UserQuery = ({
    __typename?: 'Query';
} & {
    getLoggedUser?: Maybe<({
        __typename?: 'User';
    } & Pick<User, '_id' | 'email' | 'username'>)>;
});
export declare const Logged_In_UserDocument: Apollo.DocumentNode;
/**
 * __useLogged_In_UserQuery__
 *
 * To run a query within a React component, call `useLogged_In_UserQuery` and pass it any options that fit your needs.
 * When your component renders, `useLogged_In_UserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLogged_In_UserQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useLogged_In_UserQuery(baseOptions?: Apollo.QueryHookOptions<Logged_In_UserQuery, Logged_In_UserQueryVariables>): Apollo.QueryResult<Logged_In_UserQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useLogged_In_UserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Logged_In_UserQuery, Logged_In_UserQueryVariables>): Apollo.QueryTuple<Logged_In_UserQuery, Exact<{
    [key: string]: never;
}>>;
export declare type Logged_In_UserQueryHookResult = ReturnType<typeof useLogged_In_UserQuery>;
export declare type Logged_In_UserLazyQueryHookResult = ReturnType<typeof useLogged_In_UserLazyQuery>;
export declare type Logged_In_UserQueryResult = Apollo.QueryResult<Logged_In_UserQuery, Logged_In_UserQueryVariables>;
