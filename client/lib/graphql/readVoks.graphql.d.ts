/* c6d4ee4d4539169d012a3f8f61a0bce48c5a3059
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** Mongo id scalar type */
    ObjectId: any;
};
export declare type LoginInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createVoc: Vokabel;
    deleteVok: Scalars['Boolean'];
    login: UserResponse;
    register: UserResponse;
    udpateVok: Vokabel;
};
export declare type MutationCreateVocArgs = {
    input: VokabelInput;
};
export declare type MutationDeleteVokArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type MutationLoginArgs = {
    input: LoginInput;
};
export declare type MutationRegisterArgs = {
    input: RegisterInput;
};
export declare type MutationUdpateVokArgs = {
    input: VokabelInput;
};
export declare type Query = {
    __typename?: 'Query';
    getLoggedUser?: Maybe<User>;
    readUserVoks: Array<Vokabel>;
    readVoc: Vokabel;
    readVocs: Array<Vokabel>;
    user?: Maybe<User>;
};
export declare type QueryReadUserVoksArgs = {
    userId: Scalars['ObjectId'];
};
export declare type QueryReadVocArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type QueryUserArgs = {
    userId: Scalars['ObjectId'];
};
export declare type RegisterInput = {
    email: Scalars['String'];
    password: Scalars['String'];
    username: Scalars['String'];
};
/** User */
export declare type User = {
    __typename?: 'User';
    _id: Scalars['ObjectId'];
    email: Scalars['String'];
    username: Scalars['String'];
};
export declare type UserResponse = {
    __typename?: 'UserResponse';
    token?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
};
/** Vokabel */
export declare type Vokabel = {
    __typename?: 'Vokabel';
    _id: Scalars['ObjectId'];
    creator: User;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type VokabelInput = {
    _id?: Maybe<Scalars['ObjectId']>;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type Read_VoksQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type Read_VoksQuery = ({
    __typename?: 'Query';
} & {
    readVocs: Array<({
        __typename?: 'Vokabel';
    } & Pick<Vokabel, '_id' | 'deutsch' | 'koreanisch'> & {
        creator: ({
            __typename?: 'User';
        } & Pick<User, '_id' | 'username' | 'email'>);
    })>;
});
export declare const Read_VoksDocument: Apollo.DocumentNode;
/**
 * __useRead_VoksQuery__
 *
 * To run a query within a React component, call `useRead_VoksQuery` and pass it any options that fit your needs.
 * When your component renders, `useRead_VoksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRead_VoksQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useRead_VoksQuery(baseOptions?: Apollo.QueryHookOptions<Read_VoksQuery, Read_VoksQueryVariables>): Apollo.QueryResult<Read_VoksQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useRead_VoksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Read_VoksQuery, Read_VoksQueryVariables>): Apollo.QueryTuple<Read_VoksQuery, Exact<{
    [key: string]: never;
}>>;
export declare type Read_VoksQueryHookResult = ReturnType<typeof useRead_VoksQuery>;
export declare type Read_VoksLazyQueryHookResult = ReturnType<typeof useRead_VoksLazyQuery>;
export declare type Read_VoksQueryResult = Apollo.QueryResult<Read_VoksQuery, Read_VoksQueryVariables>;
