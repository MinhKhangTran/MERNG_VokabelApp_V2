/* 3c9cbc114cd967a882d36190a6c554ca563a1f1b
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** Mongo id scalar type */
    ObjectId: any;
};
export declare type LoginInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createVoc: Vokabel;
    deleteVok: Scalars['Boolean'];
    login: UserResponse;
    register: UserResponse;
    udpateVok: Vokabel;
};
export declare type MutationCreateVocArgs = {
    input: VokabelInput;
};
export declare type MutationDeleteVokArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type MutationLoginArgs = {
    input: LoginInput;
};
export declare type MutationRegisterArgs = {
    input: RegisterInput;
};
export declare type MutationUdpateVokArgs = {
    input: VokabelInput;
};
export declare type Query = {
    __typename?: 'Query';
    getLoggedUser?: Maybe<User>;
    readUserVoks: Array<Vokabel>;
    readVoc: Vokabel;
    readVocs: Array<Vokabel>;
    user?: Maybe<User>;
};
export declare type QueryReadUserVoksArgs = {
    userId: Scalars['ObjectId'];
};
export declare type QueryReadVocArgs = {
    vokId: Scalars['ObjectId'];
};
export declare type QueryUserArgs = {
    userId: Scalars['ObjectId'];
};
export declare type RegisterInput = {
    email: Scalars['String'];
    password: Scalars['String'];
    username: Scalars['String'];
};
/** User */
export declare type User = {
    __typename?: 'User';
    _id: Scalars['ObjectId'];
    email: Scalars['String'];
    username: Scalars['String'];
};
export declare type UserResponse = {
    __typename?: 'UserResponse';
    token?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
};
/** Vokabel */
export declare type Vokabel = {
    __typename?: 'Vokabel';
    _id: Scalars['ObjectId'];
    creator: User;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type VokabelInput = {
    _id?: Maybe<Scalars['ObjectId']>;
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
};
export declare type Create_VokMutationVariables = Exact<{
    deutsch: Scalars['String'];
    koreanisch: Scalars['String'];
}>;
export declare type Create_VokMutation = ({
    __typename?: 'Mutation';
} & {
    createVoc: ({
        __typename?: 'Vokabel';
    } & Pick<Vokabel, '_id' | 'koreanisch' | 'deutsch'> & {
        creator: ({
            __typename?: 'User';
        } & Pick<User, '_id' | 'username' | 'email'>);
    });
});
export declare const Create_VokDocument: Apollo.DocumentNode;
export declare type Create_VokMutationFn = Apollo.MutationFunction<Create_VokMutation, Create_VokMutationVariables>;
/**
 * __useCreate_VokMutation__
 *
 * To run a mutation, you first call `useCreate_VokMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreate_VokMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createVokMutation, { data, loading, error }] = useCreate_VokMutation({
 *   variables: {
 *      deutsch: // value for 'deutsch'
 *      koreanisch: // value for 'koreanisch'
 *   },
 * });
 */
export declare function useCreate_VokMutation(baseOptions?: Apollo.MutationHookOptions<Create_VokMutation, Create_VokMutationVariables>): Apollo.MutationTuple<Create_VokMutation, Exact<{
    deutsch: string;
    koreanisch: string;
}>>;
export declare type Create_VokMutationHookResult = ReturnType<typeof useCreate_VokMutation>;
export declare type Create_VokMutationResult = Apollo.MutationResult<Create_VokMutation>;
export declare type Create_VokMutationOptions = Apollo.BaseMutationOptions<Create_VokMutation, Create_VokMutationVariables>;
