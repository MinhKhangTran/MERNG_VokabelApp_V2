/* 7180149ed30edb4e7ceeeaf73558a44f63d4be52
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Mongo id scalar type */
  ObjectId: any;
};

export type LoginInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createVoc: Vokabel;
  deleteVok: Scalars['Boolean'];
  login: UserResponse;
  register: UserResponse;
  udpateVok: Vokabel;
};


export type MutationCreateVocArgs = {
  input: VokabelInput;
};


export type MutationDeleteVokArgs = {
  vokId: Scalars['ObjectId'];
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationRegisterArgs = {
  input: RegisterInput;
};


export type MutationUdpateVokArgs = {
  input: VokabelInput;
};


export type Query = {
  __typename?: 'Query';
  getLoggedUser?: Maybe<User>;
  readUserVoks: Array<Vokabel>;
  readVoc: Vokabel;
  readVocs: Array<Vokabel>;
  user?: Maybe<User>;
};


export type QueryReadUserVoksArgs = {
  userId: Scalars['ObjectId'];
};


export type QueryReadVocArgs = {
  vokId: Scalars['ObjectId'];
};


export type QueryUserArgs = {
  userId: Scalars['ObjectId'];
};

export type RegisterInput = {
  email: Scalars['String'];
  password: Scalars['String'];
  username: Scalars['String'];
};

/** User */
export type User = {
  __typename?: 'User';
  _id: Scalars['ObjectId'];
  email: Scalars['String'];
  username: Scalars['String'];
};

export type UserResponse = {
  __typename?: 'UserResponse';
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

/** Vokabel */
export type Vokabel = {
  __typename?: 'Vokabel';
  _id: Scalars['ObjectId'];
  creator: User;
  deutsch: Scalars['String'];
  koreanisch: Scalars['String'];
};

export type VokabelInput = {
  _id?: Maybe<Scalars['ObjectId']>;
  deutsch: Scalars['String'];
  koreanisch: Scalars['String'];
};

export type Update_VokMutationVariables = Exact<{
  input: VokabelInput;
}>;


export type Update_VokMutation = (
  { __typename?: 'Mutation' }
  & { udpateVok: (
    { __typename?: 'Vokabel' }
    & Pick<Vokabel, '_id' | 'deutsch' | 'koreanisch'>
    & { creator: (
      { __typename?: 'User' }
      & Pick<User, '_id' | 'username' | 'email'>
    ) }
  ) }
);


export const Update_VokDocument = gql`
    mutation UPDATE_VOK($input: VokabelInput!) {
  udpateVok(input: $input) {
    _id
    deutsch
    koreanisch
    creator {
      _id
      username
      email
    }
  }
}
    `;
export type Update_VokMutationFn = Apollo.MutationFunction<Update_VokMutation, Update_VokMutationVariables>;

/**
 * __useUpdate_VokMutation__
 *
 * To run a mutation, you first call `useUpdate_VokMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdate_VokMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateVokMutation, { data, loading, error }] = useUpdate_VokMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdate_VokMutation(baseOptions?: Apollo.MutationHookOptions<Update_VokMutation, Update_VokMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Update_VokMutation, Update_VokMutationVariables>(Update_VokDocument, options);
      }
export type Update_VokMutationHookResult = ReturnType<typeof useUpdate_VokMutation>;
export type Update_VokMutationResult = Apollo.MutationResult<Update_VokMutation>;
export type Update_VokMutationOptions = Apollo.BaseMutationOptions<Update_VokMutation, Update_VokMutationVariables>;